#
# WireGuard L3VPN Push-based tunnels
#
# Example usage:
# > ansible-playbook playbook.yaml -t wgpush -l hub1,hub2,spoke1 -e @vars/wg42.yaml \
#   -e "spoke=spoke1 spoke_if=ether7 spoke_if_addr=192.168.99.1/24 state=create"
#

# remove from hubs
- name: wg_hub_remove
  routeros_command:
    commands:
      - /interface/wireguard/peers remove [find interface=wg{{ wg_id }} endpoint-address={{ lookup('dig', spoke) }}]
      - /ip/route remove [find where static dst-address={{ spoke_if_addr|ansible.utils.ipv4('network/prefix') }}]
  when:
    - state == "absent"
    - (wg_hub_primary == inventory_hostname or wg_hub_secondary == inventory_hostname)

# remove tunnel from spoke
- name: wg_spoke_remove
  routeros_command:
    commands:
      - /ip/route remove [find where static gateway~"wg{{ wg_id }}.*"]
      - /interface/wireguard/peers remove [find interface=wg{{ wg_id }}]
      - /ip/address remove [find interface=wg{{ wg_id }}]
      - /ip/address remove [find address={{ spoke_if_addr }}]
      - /interface/wireguard remove [find name=wg{{ wg_id }}]
  when:
    - state == "absent"
    - spoke == inventory_hostname

# remove vrf
- name: wg_spoke_remove_vrf
  routeros_command:
    commands:
      - /interface/list/member remove [find list=vrf_{{ spoke_vrf }}]
      - /interface/list remove [find name=vrf_{{ spoke_vrf }}]
      - /ip/vrf remove [find name={{ spoke_vrf }}]
  when:
    - state == "absent"
    - spoke == inventory_hostname
    - spoke_vrf is defined

# remove interface list
- name: wg_spoke_remove_intf_list
  routeros_command:
    commands:
      - /interface/list/member remove [find list={{ spoke_if_list }} interface={{ spoke_if }}]
  when:
    - state == "absent"
    - spoke == inventory_hostname
    - spoke_if_list is defined



#
# Spoke tasks
#
- name: wg_spoke_deploy
  routeros_command:
    commands:
      - /ip/route remove [find where static gateway~"wg{{ wg_id }}.*"]
      - /interface wireguard add name=wg{{ wg_id }} {{ wg_tunnel_opts }} \
          listen-port=518{{ wg_id }} comment="{{ comment }}"
      - /ip/address add address={{ spoke_if_addr }} interface={{ spoke_if }}
      - /interface/wireguard/peers add interface=wg{{ wg_id }} {{ wg_peer_opts }} \
          name=wg{{ wg_id }}-hub-{{ wg_hub_group }} \
          endpoint-address={{ wg_hub_loopback }} \
          endpoint-port=518{{ wg_id }} \
          allowed-address={{ wg_hub_networks }} \
          public-key="{{ wg_hub_pubkey }}"
  when:
    - state == "create"
    - spoke == inventory_hostname


# create and move to vrf
- name: wg_spoke_vrf
  routeros_command:
    commands:
      - /interface/list add name=vrf_{{ spoke_vrf }}
      - /interface/list/member add list=vrf_{{ spoke_vrf }} interface=wg{{ wg_id }}
      - /interface/list/member add list=vrf_{{ spoke_vrf }} interface={{ spoke_if }}
      - /ip/vrf add name={{ spoke_vrf }} interfaces=vrf_{{ spoke_vrf }}
  when:
    - state == "create"
    - spoke == inventory_hostname
    - spoke_vrf is defined


# create routes 
- name: wg_spoke_routes_add
  routeros_command:
    commands:
      - /ip/route add dst-address={{ item }} gateway=wg{{ wg_id }} comment=wg{{ wg_id }}-hub-{{ wg_hub_group }} 
  when:
    - state == "create"
    - spoke == inventory_hostname
    - spoke_vrf is not defined
  loop: "{{ wg_hub_routes }}"


# create routes in vrf
- name: wg_spoke_routes_add_vrf
  routeros_command:
    commands:
      - /ip/route add dst-address={{ item }} gateway=wg{{ wg_id }} comment=wg{{ wg_id }}-hub-{{ wg_hub_group }} \
          routing-table={{ spoke_vrf }} vrf-interface={{ spoke_vrf }}
  when:
    - state == "create"
    - spoke == inventory_hostname
    - spoke_vrf is defined
  loop: "{{ wg_hub_routes }}"


# add spoke interface to list
- name: wg_spoke_if_list
  routeros_command:
    commands:
      - /interface/list/member add list={{ spoke_if_list }} interface={{ spoke_if }}
  when:
    - state == "create"
    - spoke == inventory_hostname
    - spoke_if_list is defined


# get public-key from spoke tunnel
- name: wg_spoke_get_pubkey
  routeros_command:
    commands:
      - :put [/interface/wireguard get [find name=wg{{ wg_id }}] public-key]
  register: spoke_pubkey_raw
  when:
    - state == "create"
    - spoke == inventory_hostname




#
# Hub tasks
#

# add peer to primary hub
- name: wg_hub_deploy_primary
  routeros_command:
    commands:
      - /interface/wireguard/peers add name=wg{{ wg_id }}-spoke-{{ spoke }} {{ wg_peer_opts }} \
          interface=wg{{ wg_id }} \
          allowed-address={{ spoke_if_addr|ansible.utils.ipv4('network/prefix') }} \
          endpoint-address={{ lookup('dig', spoke) }} \
          endpoint-port=518{{ wg_id }} \
          public-key="{{ hostvars[spoke].spoke_pubkey_raw.stdout[0] }}"
  when:
    - state == "create"
    - wg_hub_primary == inventory_hostname


# add peer to secondary hub
- name: wg_hub_deploy_secondary
  routeros_command:
    commands:
      - /interface/wireguard/peers add name=wg{{ wg_id }}-spoke-{{ spoke }} {{ wg_peer_opts }} \
          interface=wg{{ wg_id }} \
          allowed-address={{ spoke_if_addr|ansible.utils.ipv4('network/prefix') }} \
          endpoint-address={{ lookup('dig', spoke) }} \
          endpoint-port=518{{ wg_id }} \
          public-key="{{ hostvars[spoke].spoke_pubkey_raw.stdout[0] }}"
  when:
    - state == "create"
    - wg_hub_secondary == inventory_hostname


# add route to tunnel
- name: wg_hub_deploy_route
  routeros_command:
    commands:
      - /ip/route remove [find dst-address={{ spoke_if_addr|ansible.utils.ipv4('network/prefix') }}]
      - /ip/route add comment=wg{{ wg_id }}-spoke-{{ spoke }} \
          dst-address={{ spoke_if_addr|ansible.utils.ipv4('network/prefix') }} \
          gateway=wg{{ wg_id }}
  when:
    - state == "create"
    - (wg_hub_primary == inventory_hostname or wg_hub_secondary == inventory_hostname)


# add route to specific vrf
- name: wg_hub_deploy_route_vrf
  routeros_command:
    commands:
      - /ip/route remove [find dst-address={{ spoke_if_addr|ansible.utils.ipv4('network/prefix') }}]
      - /ip/route add comment=wg{{ wg_id }}-spoke-{{ spoke }} \
          dst-address={{ spoke_if_addr|ansible.utils.ipv4('network/prefix') }} \
          gateway=wg{{ wg_id }} routing-table={{ wg_hub_vrf }} vrf-interface={{ wg_hub_vrf }}
  when:
    - state == "create"
    - (wg_hub_primary == inventory_hostname or wg_hub_secondary == inventory_hostname)
    - wg_hub_vrf is defined




#
# Active tunnel
#
- name: wg_spoke_active_tunnel
  routeros_command:
    commands:
      - /ip/address add address={{ spoke_tun_addr }}/{{ wg_tun_cidr }} interface=wg{{ wg_id }}
  when:
    - state == "create"
    - spoke == inventory_hostname
    - wg_tun_active == true


- name: wg_hub_active_tunnel
  routeros_command:
    commands:
      - /interface/wireguard/peers set [find name=wg{{ wg_id }}-spoke-{{ spoke }}] \
          allowed-address={{ spoke_tun_addr }},{{ spoke_if_addr|ansible.utils.ipv4('network/prefix') }}
      - /ip/route set [find dst-address={{ spoke_if_addr|ansible.utils.ipv4('network/prefix') }}] \
          gateway={{ spoke_tun_addr }} check-gateway=ping
  when:
    - state == "create"
    - (wg_hub_primary == inventory_hostname or wg_hub_secondary == inventory_hostname)
    - wg_tun_active == true



#
# Notify some web service
#
- name: wg_register
  ansible.builtin.uri:
    url: http://localhost:5005/api/ansible/test
    method: POST
    #body_format: form-urlencoded
    body_format: json
    body:
      type: "wireguard"
      wg_id: "{{ wg_id }}"
      tunnel: "wg{{ wg_id }}"
      spoke: "{{ spoke }}"
      spoke_if: "{{ spoke_if }}"
      spoke_if_addr: "{{ spoke_if_addr }}"
      hub_primary: "{{ wg_hub_primary }}"
      hub_secondary: "{{ wg_hub_secondary }}"
      state: "{{ state }}"
    status_code: 200
  when:
    - api_register is defined


