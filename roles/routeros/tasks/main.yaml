#
# RouterOS tasks
#

# detect version and architecture
- name: get_ros_ver
  tags: detect
  routeros_command:
    commands: ":put [/system resource get version]"
  register: ros_ver

- name: get_ros_arch
  tags: detect
  routeros_command:
    commands: ":put [/system resource get architecture-name]"
  register: ros_arch



#
# EoIP
#
- name: ros_eoip
  tags: eoip
  import_tasks: roles/routeros/tasks/eoip.yaml

- name: ros_eoip_ab
  tags: eoip
  import_tasks: roles/routeros/tasks/eoip_ab.yaml

- name: ros_push
  tags: eopush
  import_tasks: roles/routeros/tasks/eoip_push.yaml


#
# VXLAN
# 
- name: ros_vxlan
  tags: vxlan
  import_tasks: roles/routeros/tasks/vxlan_hub.yaml

- name: ros_vxlan
  tags: 
    - vxlan
    - etree
  import_tasks: roles/routeros/tasks/vxlan_etree.yaml

- name: ros_vxlan
  tags: 
    - vxlan
    - eline
  import_tasks: roles/routeros/tasks/vxlan_eline.yaml

- name: ros_vxlan_ipsec
  tags: 
    - vxlan
    - etree
  import_tasks: roles/routeros/tasks/vxlan_ipsec.yaml

- name: ros_vxlan_push
  tags: vxpush
  import_tasks: roles/routeros/tasks/vxlan_push.yaml



#
# WireGuard
#
- name: ros_wgpush
  tags: wgpush
  import_tasks: roles/routeros/tasks/wg_push.yaml

- name: ros_wg
  tags: wireguard
  import_tasks: roles/routeros/tasks/wg_spoke.yaml
  when:
    - ros_ver.stdout is search("7\..+")

- name: ros_wg
  tags: wireguard
  import_tasks: roles/routeros/tasks/wg_hub.yaml
  when:
    - ros_ver.stdout is search("7\..+")



#
# DNS and DHCP
#
- name: ros_dns
  tags: dns
  import_tasks: roles/routeros/tasks/dns.yaml

- name: ros_dhcp
  tags: dhcp
  import_tasks: roles/routeros/tasks/dhcp.yaml



#
# Mixed
#
- name: ros_misc
  tags: misc
  import_tasks: roles/routeros/tasks/misc.yaml




# users
- name: tip_users
  tags:
    - template
    - users
  routeros_command:
    commands:
      - /user add name=nmsuser group=read comment=NmsUser password={{ user_nmsuser_password }}
      - /user add name=ansible group=full comment=AnsibleUser password={{ user_ansible_password }}
      - /user add name=backupuser group=read comment=BackupUser password={{ lookup('ansible.builtin.password', '/dev/null', length=32) }}
      - :delay 2
      - /user set [find name=nmsuser] disabled=no group=read comment=NmsUser
      - /user set [find name=ansible] disabled=no group=full comment=AnsibleUser
      - /user set [find name=backupuser] disabled=no group=read comment=ConfigBackupUser
      - :delay 2
      - /tool fetch {{ pubkey_url }}id_rsa_nmsuser.pub; :delay 2; /user ssh-keys remove [find user=nmsuser]; /user ssh-keys import user=nmsuser public-key-file=id_rsa_nmsuser.pub
      - /tool fetch {{ pubkey_url }}id_rsa_ansible.pub; :delay 2; /user ssh-keys remove [find user=ansible]; /user ssh-keys import user=ansible public-key-file=id_rsa_ansible.pub
      - /tool fetch {{ pubkey_url }}id_rsa_backupuser.pub; :delay 2; /user ssh-keys remove [find user=backupuser]; /user ssh-keys import user=backupuser public-key-file=id_rsa_backupuser.pub
      - :delay 2
      - /file remove [find name=id_rsa_nmsuser.pub]
      - /file remove [find name=id_rsa_ansible.pub]
      - /file remove [find name=id_rsa_backupuser.pub]
      - /console clear-history


# users_with_key
- name: tip_users_with_key
  tags:
    - template
    - users_with_key
  routeros_command:
    commands:
      - /user add name={{ item }} group=full password={{ lookup('ansible.builtin.password', '/dev/null', length=32) }}
      - :delay 2
      - /tool fetch {{ pubkey_url }}{{ item }}.pub; :delay 2; /user ssh-keys remove [find user={{ item }}]; /user ssh-keys import user={{ item }} public-key-file={{ item }}.pub
      - /file remove [find name={{ item }}.pub]
      - /console clear-history
  loop: "{{ users_with_key }}"
















