#
# RouterOS WireGuard
# Inventory based tunnel manager
# *** under development ***
#
- name: wg_config_import
  tags: wireguard
  include_vars: vars/wireguard.yaml


# remove tunnel from spoke
- name: wg_spoke_remove
  tags: wireguard
  routeros_command:
    commands:
      - /interface/wireguard/peers remove [find interface=wg{{ item.id }}
      - /ip/address remove [find interface=wg{{ item.id }}
      - /ip/address remove [find interface={{ item.spoke_interface }}]
      - /ip/route remove [find gateway=wg{{ item.id }}]
      - /interface/list/member remove [find list=g_{{ item.spoke_vrf }}]
      - /interface/list remove [find name=g_{{ item.spoke_vrf }}]
      - /interface/wireguard remove [find name=wg{{ item.id }}]
      - /ip/vrf remove [find name={{ item.spoke_vrf }}]
  loop: "{{ wg_instances }}"
  when:
    - item.state == "absent"
    - item.spoke == inventory_hostname




- name: wg_spoke_deploy
  tags: wireguard
  routeros_command:
    commands:
      - /interface wireguard add name=wg{{ item.id }} {{ wg_tunnel_opts }} \
          listen-port=518{{ item.id }} \
          comment="{{ item.comment }}" 
      - /ip/address add address={{ item.spoke_tunnel_address }} interface=wg{{ item.id }}
      - /ip/address add address={{ item.spoke_interface_address }} interface={{ item.spoke_interface }}
      - /ip/route add dst-address={{ item.hub_network }} gateway=wg{{ item.id }}
      - /interface/wireguard/peers add interface=wg{{ item.id }} name=hub-{{ item.hub_group_name }} {{ wg_peer_opts }} \
          endpoint-address={{ item.hub_loopback }} \
          endpoint-port=518{{ item.id }} \
          allowed-address={{ item.hub_network }} \
          public-key="{{ item.hub_pubkey }}" \
  loop: "{{ wg_instances }}"
  when:
    - item.state == "create"
    - item.spoke == inventory_hostname


# create and move to vrf
- name: wg_spoke_vrf
  tags: wireguard
  routeros_command:
    commands:
      - /interface/list add name={{ item.spoke_vrf }}
      - /interface/list/member add list={{ item.spoke_vrf }} interface=wg{{ item.id }}
      - /interface/list/member add list={{ item.spoke_vrf }} interface={{ item.spoke_interface }}
      - /ip/vrf add name={{ item.spoke_vrf }} interfaces={{ item.spoke_vrf }}
      - /ip/route remove [find gateway=wg{{ item.id }}]
      - /ip/route add dst-address=0.0.0.0/0 gateway=wg{{ item.id }} \
          routing-table={{ item.spoke_vrf }} vrf-interface={{ item.spoke_vrf }}
  loop: "{{ wg_instances }}"
  when:
    - item.state == "create"
    - item.spoke == inventory_hostname
    - item.spoke_vrf is defined


# get public-key from tunnel
- name: wg_spoke_get_pubkey
  tags: wireguard
  routeros_command:
    commands:
      - :put [/interface/wireguard get [find name=wg{{ item.id }}] public-key]
  loop: "{{ wg_instances }}"
  register: spoke_pubkey_raw
  when:
    - item.state == "create"
    - item.spoke == inventory_hostname




